# -*- coding: utf-8 -*-
from __future__ import unicode_literals

"""
Django settings for sdump project.

For more information on this file, see
https://docs.djangoproject.com/en/1.7/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.7/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import ldap
import logging
from django.utils.translation import ugettext_lazy as _

BASE_DIR = os.path.dirname(os.path.dirname(__file__))
BASE_URL = "{{ app_base_url }}{{ app_url }}"
APPLICATION_NAME= "{{ app_title|capitalize }}"
APPLICATION_DESC= "{{ app_desc|capitalize }}"


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.7/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'clwt@lvpqw#f)&g*1f$2e+*!*pg($8jtpvmn5n&v8uds2l3-k='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = {{ app_debug }}

ALLOWED_HOSTS = ['*']

BASIC_AUTH_REALM = 'User Authentication'

# Application definition

INSTALLED_APPS = (
    'suit',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'jquery',
    'jquery_ui',
    'bootstrap_ui',
    'django_extensions',
    'bootstrap_themes',
    'app',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'app.middleware.ForceLangMiddleware',
)

ROOT_URLCONF = 'sdump.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'debug': {{ app_debug }},
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sdump.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.7/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '{{ db_name }}',
        'USER': '{{ db_user }}',
        'PASSWORD': '{{ db_pass }}',
        'PORT': '{{ db_port }}',
        'HOST': '{{ db_host }}',
    },
    '{{ db_user_owner }}': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '{{ db_name }}',
        'USER': '{{ db_user_owner }}',
        'PASSWORD': '{{ db_pass_owner }}',
        'PORT': '{{ db_port }}',
        'HOST': '{{ db_host }}',
    },
}


# CUSTOM CONFIGURATION OF APPLICATION ==============/

# Enable admin form button to verify connection
DATABASE_CONNECTION_VERIFICATION={{ database_connection_verification }}

# Contains the script that gets the key from RATTIC if the
# DATABASE_CONNECTION_VERIFICATION option is enabled  
RATTIC_KEY_RETRIEVAL_SCRIPT="{{ rattic_key_retrieval_script }}"

# backups
APPLICATION_NAME = "{{ app_title }}"
DUMPS_DIRECTORY = "{{ dumps_directory }}"
GROUP_DUMPS_DIRECTORY = "{{ group_dumps_directory }}"
USER_DUMPS_DIRECTORY  = "{{ user_dumps_directory }}"
PERMISSIONS_DUMPS_DIRECTORY = {{ permissions_dumps_directory }}
SUFFIX_PERIODICAL_DUMPS = "{{ suffix_periodical_dumps }}"
SUFFIX_SPORADIC_DUMPS = "{{ suffix_sporadic_dumps }}"
MAX_SPORADICS_BACKUPS = {{ max_sporadics_backups }}
DUMPS_SCRIPT = "{{ dumps_script }}"
# for configurations dumps
DUMPS_CONFIG_DIRECTORY = "{{ dumps_config_directory }}"
PERMISSIONS_CONFIG_DUMP_FILE = "{{ permissions_config_dump_file }}"
DUMPS_CONFIG_AUTHENTICATION = {{ dumps_config_authentication }}
DUMP_TIMEOUT = {{ dump_timeout }}
#
# views
USER_NOTIFICATION = "{{ user_notification }}"

# ==================================================/

# Internationalization
# https://docs.djangoproject.com/en/1.7/topics/i18n/

LANGUAGE_CODE = 'es'

LANGUAGES = (
  ('es', _('Spanish')),
  ('en', _('English')),
)

TIME_ZONE = 'America/Argentina/Buenos_Aires'

USE_I18N = True

USE_L10N = True

USE_TZ = True

DEFAULT_CHARSET = 'utf-8'

# Database engine options for server
ENGINE_OPTIONS = {{ engine_options }}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.7/howto/static-files/

{% if app_static_root %}
STATIC_ROOT = "{{ app_static_root }}"
{% endif %}
STATIC_URL="{{ app_static_url }}"

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

LOGIN_URL="{{ app_login_url }}"
LOGIN_REDIRECT_URL = "{{ app_login_redirect_url }}"


SUIT_CONFIG = {
    'ADMIN_NAME': APPLICATION_NAME
}

LOCALE_PATHS = ( BASE_DIR + '/locale', )


# LDAP Configuration ==============/

# LDAP server
LDAP_SERVER = "{{ ldap_server }}"
LDAP_DN = "{{ ldap_dn }}"

# Organizational Unit for Person
LDAP_PEOPLE = "{{ ldap_people }}"
LDAP_GROUP  = "{{ ldap_group }}"

# =================================/



# =================================\
# django ldap configuration
#
#
# Ldap Group Type
from django_auth_ldap.config import LDAPSearch, PosixGroupType
AUTH_LDAP_GROUP_SEARCH = LDAPSearch("ou={},{}".format(LDAP_GROUP,LDAP_DN),
                                    ldap.SCOPE_SUBTREE, "(objectClass=posixGroup)"
)
AUTH_LDAP_GROUP_TYPE =  PosixGroupType()
#
#
# User will be updated with LDAP every time the user logs in.
# Otherwise, the User will only be populated when it is automatically created.
AUTH_LDAP_ALWAYS_UPDATE_USER = True
#
#
# Simple group restrictions
# AUTH_LDAP_REQUIRE_GROUP = "cn=users,ou={},{}".format(LDAP_GROUP,LDAP_DN)
# AUTH_LDAP_DENY_GROUP = "cn=denygroup,ou={},{}".format(LDAP_GROUP,LDAP_DN)
#
# Defines the django admin attribute
# according to whether the user is a member or not in the specified group
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    "is_active": "cn=users,ou={},{}".format(LDAP_GROUP,LDAP_DN),
    "is_staff": "cn=users,ou={},{}".format(LDAP_GROUP,LDAP_DN),
    "is_superuser": "cn=admin,ou={},{}".format(LDAP_GROUP,LDAP_DN),
}
#
# Ldap User Auth
#AUTH_LDAP_BIND_DN = "cn={},{}".format(LDAP_USERNAME,LDAP_DN)
#AUTH_LDAP_BIND_PASSWORD = LDAP_PASSWORD

AUTH_LDAP_SERVER_URI = LDAP_SERVER

AUTH_LDAP_USER_SEARCH = LDAPSearch("ou={},{}".format(LDAP_PEOPLE,LDAP_DN),
                                   ldap.SCOPE_SUBTREE, "(uid=%(user)s)")
AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail"
}

AUTHENTICATION_BACKENDS = (
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
)

